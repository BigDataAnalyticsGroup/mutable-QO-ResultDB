description: Optimize Large Join Query Q5 with RESULTDB
suite: large_joins
benchmark: RESULTDB Optimization + Execution times with large joins
name: Q9
readonly: true
chart:
    x:
        scale: linear
        type: O
        label: Scale factor
    y:
        scale: linear
        type: Q
        label: 'Optimization Time [ms]'
data:                                                     # Definition of the tables this experiment uses.
    'rel_0':                                       # Name of this table.
        file: 'benchmark/job/result-db-eval/large_joins/data/rel_0.csv'       # Relative path to the file containing the table data
        format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
        delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
        header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
        attributes:                                       # Map from attribute name to its type.
          'fk1': 'INT NOT NULL'
          'fk2': 'INT NOT NULL'
          'fk3': 'INT NOT NULL'
          'num': 'INT NOT NULL'
    'rel_1': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_1.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_2': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_2.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_3': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_3.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_4': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_4.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_5': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_5.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_6': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_6.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_7': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_7.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'
    'rel_8': # Name of this table.
      file: 'benchmark/job/result-db-eval/large_joins/data/rel_8.csv'       # Relative path to the file containing the table data
      format: 'csv'                                     # Format of the file. Optional, defaults to 'csv'.
      delimiter: ','                                    # Delimiter of the file. Optional, defaults to ','.
      header: 0                                         # Whether the file has a header line. 1=true, 0=false. Optional, defaults to 0.
      attributes: # Map from attribute name to its type.
        'fk1': 'INT NOT NULL'
        'fk2': 'INT NOT NULL'
        'fk3': 'INT NOT NULL'
        'num': 'INT NOT NULL'

systems:
    mutable:
        args: >-
          --backend WasmV8
          --no-simd
          --insist-no-rehashing
          -t
          --cardinality-estimator Injected
          --hash-table-implementation Chained
          --use-cardinality-file benchmark/job/result-db-eval/large_joins/cyclic/cyclic_9_injected_cardinalities.json
        configurations:
          'RESULTDB, NoOpt':
            args: >-
              --result-db
            pattern:
              Optimization Time (logical): '^Compute the logical query plan:.*'
              Execution Time: '^Execute query:.*'
          'RESULTDB, Opt, NoGreedyCuts':
              args: >-
                --result-db
                --optimize-result-db
              pattern:
                Optimization Time (logical): '^Compute the logical query plan:.*'
                Execution Time: '^Execute query:.*'
          'RESULTDB, Opt, GreedyCuts':
            args: >-
              --result-db
              --optimize-result-db
              --greedy-cuts
            pattern:
              Optimization Time (logical): '^Compute the logical query plan:.*'
              Execution Time: '^Execute query:.*'
        cases:
            1:  SELECT r0.num
                FROM rel_0 AS r0, rel_1 AS r1, rel_2 AS r2, rel_3 AS r3, rel_4 AS r4, rel_5 AS r5, rel_6 AS r6, rel_7 AS r7, rel_8 AS r8
                WHERE r0.num < 60 AND r1.num < 61 AND r2.num < 62 AND r3.num < 63 AND r4.num < 64 AND r5.num < 65 AND r6.num < 66
                      AND r7.num < 67 AND r8.num < 68
                      AND r0.fk2 = r1.fk1 AND r1.fk2 = r2.fk1 AND r2.fk2 = r3.fk1 AND r3.fk2 = r4.fk1
                      AND r4.fk2 = r5.fk1 AND r5.fk2=r6.fk1 AND r6.fk2=r7.fk1 AND r7.fk2=r8.fk1 AND r8.fk2=r0.fk1 AND r1.fk3=r7.fk3 AND r2.fk3 = r6.fk3
                      AND r3.fk3 = r5.fk3;